package specification

import (
	"encoding/json"
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

// ============================================================================
// Endpoint Summary Tests  
// ============================================================================

func TestEndpoint_SummaryField(t *testing.T) {
	t.Run("endpoint with summary field marshaling and unmarshaling", func(t *testing.T) {
		endpoint := Endpoint{
			Name:        "CreateUser",
			Title:       "Create User",
			Summary:     "Create a new user",
			Description: "Create a new user account with the provided information",
			Method:      "POST",
			Path:        "",
			Request: EndpointRequest{
				BodyParams: []Field{
					{Name: "email", Type: "String", Description: "User email"},
				},
			},
			Response: EndpointResponse{
				StatusCode: 201,
				BodyFields: []Field{
					{Name: "id", Type: "UUID", Description: "User ID"},
				},
			},
		}

		// Test JSON marshaling
		jsonBytes, err := json.Marshal(endpoint)
		require.NoError(t, err)
		assert.Contains(t, string(jsonBytes), `"summary":"Create a new user"`)

		// Test JSON unmarshaling
		var unmarshaled Endpoint
		err = json.Unmarshal(jsonBytes, &unmarshaled)
		require.NoError(t, err)
		assert.Equal(t, "Create a new user", unmarshaled.Summary)

		// Test YAML marshaling
		yamlBytes, err := yaml.Marshal(endpoint)
		require.NoError(t, err)
		assert.Contains(t, string(yamlBytes), "summary: Create a new user")

		// Test YAML unmarshaling
		var yamlUnmarshaled Endpoint
		err = yaml.Unmarshal(yamlBytes, &yamlUnmarshaled)
		require.NoError(t, err)
		assert.Equal(t, "Create a new user", yamlUnmarshaled.Summary)
	})
}

func TestApplyOverlay_AutoGeneratedEndpointSummaries(t *testing.T) {
	t.Run("auto-generated endpoints should have summary field populated", func(t *testing.T) {
		input := &Service{
			Name: "TestService",
			Resources: []Resource{
				{
					Name:        "User",
					Description: "User management resource",
					Operations:  []string{OperationCreate, OperationRead, OperationUpdate, OperationDelete},
					Fields: []ResourceField{
						{
							Field: Field{
								Name:        "email",
								Type:        FieldTypeString,
								Description: "User email address",
							},
							Operations: []string{OperationCreate, OperationRead, OperationUpdate},
						},
						{
							Field: Field{
								Name:        "name",
								Type:        FieldTypeString,
								Description: "User full name",
							},
							Operations: []string{OperationCreate, OperationRead, OperationUpdate},
						},
					},
				},
			},
		}

		result := ApplyOverlay(input)
		require.NotNil(t, result)
		require.Len(t, result.Resources, 1)

		userResource := result.Resources[0]
		
		// Find each type of auto-generated endpoint and verify their summaries
		endpointsByName := make(map[string]Endpoint)
		for _, endpoint := range userResource.Endpoints {
			endpointsByName[endpoint.Name] = endpoint
		}

		// Test Create endpoint
		createEndpoint, exists := endpointsByName["Create"]
		require.True(t, exists, "Create endpoint should exist")
		assert.Equal(t, "Create User", createEndpoint.Title)
		assert.Equal(t, "Create a new User", createEndpoint.Summary)
		assert.Equal(t, "Create a new User", createEndpoint.Description)

		// Test Update endpoint
		updateEndpoint, exists := endpointsByName["Update"]
		require.True(t, exists, "Update endpoint should exist")
		assert.Equal(t, "Update User", updateEndpoint.Title)
		assert.Equal(t, "Update a User", updateEndpoint.Summary)
		assert.Equal(t, "Update a User", updateEndpoint.Description)

		// Test Delete endpoint
		deleteEndpoint, exists := endpointsByName["Delete"]
		require.True(t, exists, "Delete endpoint should exist")
		assert.Equal(t, "Delete User", deleteEndpoint.Title)
		assert.Equal(t, "Delete a User", deleteEndpoint.Summary)
		assert.Equal(t, "Delete a User", deleteEndpoint.Description)

		// Test Get endpoint
		getEndpoint, exists := endpointsByName["Get"]
		require.True(t, exists, "Get endpoint should exist")
		assert.Equal(t, "Retrieve an existing User", getEndpoint.Title)
		assert.Equal(t, "Get a User", getEndpoint.Summary)
		assert.Contains(t, getEndpoint.Description, "Retrieves the `User` with the given ID.")

		// Test List endpoint
		listEndpoint, exists := endpointsByName["List"]
		require.True(t, exists, "List endpoint should exist")
		assert.Equal(t, "List all Users", listEndpoint.Title)
		assert.Equal(t, "List Users", listEndpoint.Summary)
		assert.Contains(t, listEndpoint.Description, "Returns a paginated list of all `Users`")

		// Test Search endpoint
		searchEndpoint, exists := endpointsByName["Search"]
		require.True(t, exists, "Search endpoint should exist")
		assert.Equal(t, "Search Users", searchEndpoint.Title)
		assert.Equal(t, "Search Users", searchEndpoint.Summary)
		assert.Contains(t, searchEndpoint.Description, "Search for `Users` with filtering capabilities.")
	})
}