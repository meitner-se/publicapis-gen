name: Cache Cleanup

on:
  # Run daily at 2 AM UTC to clean up old caches
  schedule:
    - cron: '0 2 * * *'
  # Allow manual triggering for immediate cleanup
  workflow_dispatch:
    inputs:
      max_age_days:
        description: 'Maximum age of caches to keep (in days)'
        required: false
        default: '7'
        type: string
      dry_run:
        description: 'Dry run - show what would be deleted without actually deleting'
        required: false
        default: false
        type: boolean

jobs:
  cleanup:
    name: Clean Up Old Caches
    runs-on: ubuntu-latest
    permissions:
      actions: write  # Required to delete caches
    
    steps:
    - name: Delete old caches
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        MAX_AGE_DAYS: ${{ inputs.max_age_days || '7' }}
        DRY_RUN: ${{ inputs.dry_run || 'false' }}
      run: |
        echo "Starting cache cleanup..."
        echo "Repository: ${{ github.repository }}"
        echo "Max age: ${MAX_AGE_DAYS} days"
        echo "Dry run: ${DRY_RUN}"
        echo ""

        # Calculate cutoff timestamp
        cutoff=$(date -u -d "${MAX_AGE_DAYS} days ago" +%s)
        cutoff_date=$(date -u -d "${MAX_AGE_DAYS} days ago" '+%Y-%m-%d %H:%M:%S UTC')
        echo "Cutoff date: ${cutoff_date}"
        echo ""

        # Get current cache usage
        echo "Current cache status:"
        gh cache list --repo ${{ github.repository }} --limit 100 | head -10
        echo ""

        # Count and size tracking
        total_caches=0
        deleted_caches=0
        total_size_deleted=0

        # Process caches in batches to handle large lists
        page=1
        while true; do
          echo "Processing page ${page}..."
          
          # Get cache list for this page
          cache_list=$(gh cache list --repo ${{ github.repository }} --limit 100 | tail -n +2)
          
          if [ -z "$cache_list" ]; then
            echo "No more caches to process."
            break
          fi
          
          # Process each cache entry
          while IFS=$'\t' read -r id key version ref size created_at; do
            if [ -z "$id" ] || [ "$id" = "ID" ]; then
              continue
            fi
            
            total_caches=$((total_caches + 1))
            
            # Parse the created date
            if [ -n "$created_at" ]; then
              # Convert GitHub's date format to timestamp
              ts=$(date -u -d "$created_at" +%s 2>/dev/null || echo "0")
              
              if [ "$ts" -lt "$cutoff" ]; then
                echo "Cache to delete: ID=$id, Key=$key, Size=$size, Created=$created_at"
                
                if [ "$DRY_RUN" = "false" ]; then
                  if gh cache delete "$id" --repo ${{ github.repository }}; then
                    echo "  ‚úÖ Deleted cache $id"
                    deleted_caches=$((deleted_caches + 1))
                    # Extract size in MB (rough approximation)
                    size_mb=$(echo "$size" | sed 's/[^0-9.]*//g' || echo "0")
                    total_size_deleted=$(echo "$total_size_deleted + $size_mb" | bc -l 2>/dev/null || echo "$total_size_deleted")
                  else
                    echo "  ‚ùå Failed to delete cache $id"
                  fi
                else
                  echo "  üîç Would delete cache $id (dry run)"
                  deleted_caches=$((deleted_caches + 1))
                fi
              else
                cache_age_days=$(( ($(date +%s) - ts) / 86400 ))
                echo "Cache kept: ID=$id, Age=${cache_age_days}d, Size=$size"
              fi
            fi
          done <<< "$cache_list"
          
          page=$((page + 1))
          
          # Safety limit to prevent infinite loops
          if [ "$page" -gt 50 ]; then
            echo "Reached page limit (50), stopping."
            break
          fi
        done

        echo ""
        echo "Cache cleanup summary:"
        echo "  Total caches processed: $total_caches"
        echo "  Caches deleted: $deleted_caches"
        if [ "$DRY_RUN" = "false" ]; then
          echo "  Estimated storage freed: ${total_size_deleted} MB"
        else
          echo "  This was a dry run - no caches were actually deleted"
        fi
        
        # Show final cache status
        echo ""
        echo "Final cache status:"
        gh cache list --repo ${{ github.repository }} --limit 10