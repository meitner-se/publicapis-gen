name: Cache Monitoring

on:
  # Run after CI workflows to monitor cache usage
  workflow_run:
    workflows: ["CI"]
    types: [completed]
  # Allow manual monitoring
  workflow_dispatch:
  # Weekly cache health check
  schedule:
    - cron: '0 8 * * 1'  # Monday at 8 AM UTC

jobs:
  monitor:
    name: Monitor Cache Usage
    runs-on: ubuntu-latest
    permissions:
      actions: read  # Required to read caches
    
    steps:
    - name: Cache Usage Report
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "🔍 GitHub Actions Cache Usage Report"
        echo "Repository: ${{ github.repository }}"
        echo "Report generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo ""
        
        # Get cache statistics
        echo "📊 Cache Statistics:"
        
        # Count total caches
        total_caches=$(gh cache list --repo ${{ github.repository }} --limit 1000 | tail -n +2 | wc -l)
        echo "  Total active caches: $total_caches"
        
        # GitHub's 10GB limit
        limit_gb=10
        echo "  GitHub cache limit: ${limit_gb} GB"
        
        # Show current cache list with details
        echo ""
        echo "📋 Current Cache Entries (showing first 20):"
        echo "ID$(printf '\t')Key$(printf '\t\t\t')Size$(printf '\t')Created"
        echo "────────────────────────────────────────────────────────────────────"
        
        gh cache list --repo ${{ github.repository }} --limit 20 | tail -n +2 | while IFS=$'\t' read -r id key version ref size created_at; do
          if [ -n "$id" ]; then
            # Truncate long keys for readability
            short_key=$(echo "$key" | cut -c1-30)
            if [ ${#key} -gt 30 ]; then
              short_key="${short_key}..."
            fi
            printf "%-8s\t%-33s\t%-8s\t%s\n" "$id" "$short_key" "$size" "$created_at"
          fi
        done
        
        echo ""
        echo "🔍 Cache Analysis by Key Pattern:"
        
        # Analyze cache patterns
        gh cache list --repo ${{ github.repository }} --limit 1000 | tail -n +2 | while IFS=$'\t' read -r id key version ref size created_at; do
          if [ -n "$key" ]; then
            echo "$key"
          fi
        done | sed 's/-[0-9a-f]\{40,\}.*$//' | sort | uniq -c | sort -rn | head -10 | while read count pattern; do
          echo "  $count caches matching pattern: $pattern*"
        done
        
        echo ""
        echo "📅 Cache Age Distribution:"
        
        # Analyze cache ages
        now=$(date +%s)
        declare -A age_buckets
        
        gh cache list --repo ${{ github.repository }} --limit 1000 | tail -n +2 | while IFS=$'\t' read -r id key version ref size created_at; do
          if [ -n "$created_at" ]; then
            ts=$(date -u -d "$created_at" +%s 2>/dev/null || echo "$now")
            age_days=$(( (now - ts) / 86400 ))
            
            if [ "$age_days" -le 1 ]; then
              echo "≤ 1 day"
            elif [ "$age_days" -le 7 ]; then
              echo "≤ 1 week"
            elif [ "$age_days" -le 30 ]; then
              echo "≤ 1 month"
            else
              echo "> 1 month"
            fi
          fi
        done | sort | uniq -c | while read count age_group; do
          echo "  $count caches $age_group old"
        done
        
        echo ""
        echo "💡 Recommendations:"
        
        # Provide recommendations based on cache count
        if [ "$total_caches" -gt 50 ]; then
          echo "  ⚠️  High cache count detected ($total_caches caches)"
          echo "     Consider running cache cleanup more frequently"
          echo "     Review cache key strategies to reduce duplication"
        elif [ "$total_caches" -gt 30 ]; then
          echo "  ⚠️  Moderate cache count ($total_caches caches)"
          echo "     Monitor growth and consider weekly cleanup"
        else
          echo "  ✅ Cache count is reasonable ($total_caches caches)"
        fi
        
        # Check for old caches
        old_caches=$(gh cache list --repo ${{ github.repository }} --limit 1000 | tail -n +2 | while IFS=$'\t' read -r id key version ref size created_at; do
          if [ -n "$created_at" ]; then
            ts=$(date -u -d "$created_at" +%s 2>/dev/null || echo "$now")
            age_days=$(( (now - ts) / 86400 ))
            if [ "$age_days" -gt 14 ]; then
              echo "old"
            fi
          fi
        done | wc -l)
        
        if [ "$old_caches" -gt 0 ]; then
          echo "  🧹 Found $old_caches caches older than 14 days"
          echo "     Consider running: gh workflow run cache-cleanup.yml"
        fi
        
        echo ""
        echo "🔗 Quick Actions:"
        echo "  • Manual cache cleanup: gh workflow run cache-cleanup.yml"
        echo "  • Dry run cleanup: gh workflow run cache-cleanup.yml -f dry_run=true"
        echo "  • Custom cleanup (3 days): gh workflow run cache-cleanup.yml -f max_age_days=3"