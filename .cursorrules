# Directory API v1 - Cursor Rules

## General Go Development Guidelines

### Code Quality & Constants
- **NO hardcoded strings in code** - All string literals must be defined as constants in the `constants/constants.go` package
- Use meaningful constant names that clearly express intent
- Group related constants together with clear documentation
- Import constants package: `"github.com/meitner-se/publicapis-gen/constants"`

### Examples of Required Constants Usage
```go
// ❌ BAD - Hardcoded strings
return errors.New("not implemented")
slog.ErrorContext(ctx, "failed to run", "error", err)
if containsOperation(resource.Operations, "Read") {

// ✅ GOOD - Use constants
return errors.New(constants.ErrorNotImplemented)
slog.ErrorContext(ctx, constants.ErrorFailedToRun, constants.LogKeyError, err)
if containsOperation(resource.Operations, constants.OperationRead) {
```

### String Categories Requiring Constants
1. **Error Messages**: All error strings must use constants
2. **Log Messages**: All log message keys and values must use constants
3. **CRUD Operations**: "Create", "Read", "Update", "Delete" → use `constants.Operation*`
4. **Field Types**: "UUID", "String", "Int", "Bool" → use `constants.Type*`
5. **HTTP Methods**: "GET", "POST", etc. → use `constants.HTTPMethod*`
6. **Content Types**: "application/json" → use `constants.ContentType*`
7. **Field Modifiers**: "array", "nullable" → use `constants.Modifier*`

### Exception for Test Files
Test files (files ending in `_test.go`) may contain hardcoded strings for test data, but should still use constants for:
- Repeated test values
- Error messages being tested
- Configuration values

### Adding New Constants
When adding new functionality:
1. First, check if a similar constant already exists in `constants/constants.go`
2. If not, add the new constant to the appropriate section
3. Use clear, descriptive names following Go naming conventions
4. Add documentation comments for non-obvious constants

### Code Review Checklist
Before submitting code:
- [ ] No hardcoded strings in production code (except test data)
- [ ] All constants imported from `constants` package
- [ ] New constants added to appropriate sections
- [ ] Clear and descriptive constant names used

This ensures maintainable, consistent code that's easy to update and internationalize if needed.